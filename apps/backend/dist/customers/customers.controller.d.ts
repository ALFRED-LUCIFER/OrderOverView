import { CustomersService } from './customers.service';
import { CreateCustomerDto } from './dto/create-customer.dto';
import { UpdateCustomerDto } from './dto/update-customer.dto';
export declare class CustomersController {
    private readonly customersService;
    constructor(customersService: CustomersService);
    create(createCustomerDto: CreateCustomerDto): Promise<{
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            orderDate: Date;
            orderNumber: string;
            customerId: string;
            glassType: import("@prisma/client").$Enums.GlassType;
            glassClass: import("@prisma/client").$Enums.GlassClass;
            thickness: number;
            width: number;
            height: number;
            quantity: number;
            unitPrice: number;
            totalPrice: number;
            currency: string;
            status: import("@prisma/client").$Enums.OrderStatus;
            priority: import("@prisma/client").$Enums.Priority;
            edgeWork: string | null;
            coating: string | null;
            tempering: boolean;
            laminated: boolean;
            requiredDate: Date | null;
            completedDate: Date | null;
            notes: string | null;
            internalNotes: string | null;
        }[];
    } & {
        name: string;
        email: string;
        phone: string | null;
        address: string | null;
        country: string;
        city: string | null;
        company: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findAll(): Promise<({
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            orderDate: Date;
            orderNumber: string;
            customerId: string;
            glassType: import("@prisma/client").$Enums.GlassType;
            glassClass: import("@prisma/client").$Enums.GlassClass;
            thickness: number;
            width: number;
            height: number;
            quantity: number;
            unitPrice: number;
            totalPrice: number;
            currency: string;
            status: import("@prisma/client").$Enums.OrderStatus;
            priority: import("@prisma/client").$Enums.Priority;
            edgeWork: string | null;
            coating: string | null;
            tempering: boolean;
            laminated: boolean;
            requiredDate: Date | null;
            completedDate: Date | null;
            notes: string | null;
            internalNotes: string | null;
        }[];
    } & {
        name: string;
        email: string;
        phone: string | null;
        address: string | null;
        country: string;
        city: string | null;
        company: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    })[]>;
    search(query: string): Promise<({
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            orderDate: Date;
            orderNumber: string;
            customerId: string;
            glassType: import("@prisma/client").$Enums.GlassType;
            glassClass: import("@prisma/client").$Enums.GlassClass;
            thickness: number;
            width: number;
            height: number;
            quantity: number;
            unitPrice: number;
            totalPrice: number;
            currency: string;
            status: import("@prisma/client").$Enums.OrderStatus;
            priority: import("@prisma/client").$Enums.Priority;
            edgeWork: string | null;
            coating: string | null;
            tempering: boolean;
            laminated: boolean;
            requiredDate: Date | null;
            completedDate: Date | null;
            notes: string | null;
            internalNotes: string | null;
        }[];
    } & {
        name: string;
        email: string;
        phone: string | null;
        address: string | null;
        country: string;
        city: string | null;
        company: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    })[]>;
    findOne(id: string): Promise<{
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            orderDate: Date;
            orderNumber: string;
            customerId: string;
            glassType: import("@prisma/client").$Enums.GlassType;
            glassClass: import("@prisma/client").$Enums.GlassClass;
            thickness: number;
            width: number;
            height: number;
            quantity: number;
            unitPrice: number;
            totalPrice: number;
            currency: string;
            status: import("@prisma/client").$Enums.OrderStatus;
            priority: import("@prisma/client").$Enums.Priority;
            edgeWork: string | null;
            coating: string | null;
            tempering: boolean;
            laminated: boolean;
            requiredDate: Date | null;
            completedDate: Date | null;
            notes: string | null;
            internalNotes: string | null;
        }[];
    } & {
        name: string;
        email: string;
        phone: string | null;
        address: string | null;
        country: string;
        city: string | null;
        company: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    update(id: string, updateCustomerDto: UpdateCustomerDto): Promise<{
        orders: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            orderDate: Date;
            orderNumber: string;
            customerId: string;
            glassType: import("@prisma/client").$Enums.GlassType;
            glassClass: import("@prisma/client").$Enums.GlassClass;
            thickness: number;
            width: number;
            height: number;
            quantity: number;
            unitPrice: number;
            totalPrice: number;
            currency: string;
            status: import("@prisma/client").$Enums.OrderStatus;
            priority: import("@prisma/client").$Enums.Priority;
            edgeWork: string | null;
            coating: string | null;
            tempering: boolean;
            laminated: boolean;
            requiredDate: Date | null;
            completedDate: Date | null;
            notes: string | null;
            internalNotes: string | null;
        }[];
    } & {
        name: string;
        email: string;
        phone: string | null;
        address: string | null;
        country: string;
        city: string | null;
        company: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    remove(id: string): Promise<{
        name: string;
        email: string;
        phone: string | null;
        address: string | null;
        country: string;
        city: string | null;
        company: string | null;
        id: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
}
