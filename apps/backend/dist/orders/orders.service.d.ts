import { PrismaService } from '../prisma/prisma.service';
import { CreateOrderDto } from './dto/create-order.dto';
import { UpdateOrderDto } from './dto/update-order.dto';
export declare class OrdersService {
    private prisma;
    constructor(prisma: PrismaService);
    create(createOrderDto: CreateOrderDto): Promise<{
        customer: {
            name: string;
            email: string;
            phone: string | null;
            address: string | null;
            country: string;
            city: string | null;
            company: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        orderDate: Date;
        orderNumber: string;
        customerId: string;
        glassType: import("@prisma/client").$Enums.GlassType;
        glassClass: import("@prisma/client").$Enums.GlassClass;
        thickness: number;
        width: number;
        height: number;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
        currency: string;
        status: import("@prisma/client").$Enums.OrderStatus;
        priority: import("@prisma/client").$Enums.Priority;
        edgeWork: string | null;
        coating: string | null;
        tempering: boolean;
        laminated: boolean;
        requiredDate: Date | null;
        completedDate: Date | null;
        notes: string | null;
        internalNotes: string | null;
    }>;
    findAll(): Promise<({
        customer: {
            name: string;
            email: string;
            phone: string | null;
            address: string | null;
            country: string;
            city: string | null;
            company: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        orderDate: Date;
        orderNumber: string;
        customerId: string;
        glassType: import("@prisma/client").$Enums.GlassType;
        glassClass: import("@prisma/client").$Enums.GlassClass;
        thickness: number;
        width: number;
        height: number;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
        currency: string;
        status: import("@prisma/client").$Enums.OrderStatus;
        priority: import("@prisma/client").$Enums.Priority;
        edgeWork: string | null;
        coating: string | null;
        tempering: boolean;
        laminated: boolean;
        requiredDate: Date | null;
        completedDate: Date | null;
        notes: string | null;
        internalNotes: string | null;
    })[]>;
    findOne(id: string): Promise<{
        customer: {
            name: string;
            email: string;
            phone: string | null;
            address: string | null;
            country: string;
            city: string | null;
            company: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        orderDate: Date;
        orderNumber: string;
        customerId: string;
        glassType: import("@prisma/client").$Enums.GlassType;
        glassClass: import("@prisma/client").$Enums.GlassClass;
        thickness: number;
        width: number;
        height: number;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
        currency: string;
        status: import("@prisma/client").$Enums.OrderStatus;
        priority: import("@prisma/client").$Enums.Priority;
        edgeWork: string | null;
        coating: string | null;
        tempering: boolean;
        laminated: boolean;
        requiredDate: Date | null;
        completedDate: Date | null;
        notes: string | null;
        internalNotes: string | null;
    }>;
    update(id: string, updateOrderDto: UpdateOrderDto): Promise<{
        customer: {
            name: string;
            email: string;
            phone: string | null;
            address: string | null;
            country: string;
            city: string | null;
            company: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        orderDate: Date;
        orderNumber: string;
        customerId: string;
        glassType: import("@prisma/client").$Enums.GlassType;
        glassClass: import("@prisma/client").$Enums.GlassClass;
        thickness: number;
        width: number;
        height: number;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
        currency: string;
        status: import("@prisma/client").$Enums.OrderStatus;
        priority: import("@prisma/client").$Enums.Priority;
        edgeWork: string | null;
        coating: string | null;
        tempering: boolean;
        laminated: boolean;
        requiredDate: Date | null;
        completedDate: Date | null;
        notes: string | null;
        internalNotes: string | null;
    }>;
    remove(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        orderDate: Date;
        orderNumber: string;
        customerId: string;
        glassType: import("@prisma/client").$Enums.GlassType;
        glassClass: import("@prisma/client").$Enums.GlassClass;
        thickness: number;
        width: number;
        height: number;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
        currency: string;
        status: import("@prisma/client").$Enums.OrderStatus;
        priority: import("@prisma/client").$Enums.Priority;
        edgeWork: string | null;
        coating: string | null;
        tempering: boolean;
        laminated: boolean;
        requiredDate: Date | null;
        completedDate: Date | null;
        notes: string | null;
        internalNotes: string | null;
    }>;
    findByCustomer(customerId: string): Promise<({
        customer: {
            name: string;
            email: string;
            phone: string | null;
            address: string | null;
            country: string;
            city: string | null;
            company: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        orderDate: Date;
        orderNumber: string;
        customerId: string;
        glassType: import("@prisma/client").$Enums.GlassType;
        glassClass: import("@prisma/client").$Enums.GlassClass;
        thickness: number;
        width: number;
        height: number;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
        currency: string;
        status: import("@prisma/client").$Enums.OrderStatus;
        priority: import("@prisma/client").$Enums.Priority;
        edgeWork: string | null;
        coating: string | null;
        tempering: boolean;
        laminated: boolean;
        requiredDate: Date | null;
        completedDate: Date | null;
        notes: string | null;
        internalNotes: string | null;
    })[]>;
    findByStatus(status: string): Promise<({
        customer: {
            name: string;
            email: string;
            phone: string | null;
            address: string | null;
            country: string;
            city: string | null;
            company: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        orderDate: Date;
        orderNumber: string;
        customerId: string;
        glassType: import("@prisma/client").$Enums.GlassType;
        glassClass: import("@prisma/client").$Enums.GlassClass;
        thickness: number;
        width: number;
        height: number;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
        currency: string;
        status: import("@prisma/client").$Enums.OrderStatus;
        priority: import("@prisma/client").$Enums.Priority;
        edgeWork: string | null;
        coating: string | null;
        tempering: boolean;
        laminated: boolean;
        requiredDate: Date | null;
        completedDate: Date | null;
        notes: string | null;
        internalNotes: string | null;
    })[]>;
    search(query: string): Promise<({
        customer: {
            name: string;
            email: string;
            phone: string | null;
            address: string | null;
            country: string;
            city: string | null;
            company: string | null;
            id: string;
            createdAt: Date;
            updatedAt: Date;
        };
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        orderDate: Date;
        orderNumber: string;
        customerId: string;
        glassType: import("@prisma/client").$Enums.GlassType;
        glassClass: import("@prisma/client").$Enums.GlassClass;
        thickness: number;
        width: number;
        height: number;
        quantity: number;
        unitPrice: number;
        totalPrice: number;
        currency: string;
        status: import("@prisma/client").$Enums.OrderStatus;
        priority: import("@prisma/client").$Enums.Priority;
        edgeWork: string | null;
        coating: string | null;
        tempering: boolean;
        laminated: boolean;
        requiredDate: Date | null;
        completedDate: Date | null;
        notes: string | null;
        internalNotes: string | null;
    })[]>;
    generateOrderNumber(): Promise<string>;
}
